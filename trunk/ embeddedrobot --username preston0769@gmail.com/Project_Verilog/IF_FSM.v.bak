module IR_FSM(
			sysclk,
			reset,
			IRDATA,
			
			wrcmd,
			wrdata
);

input sysclk;
input reset;
input IRDATA;

output wrcmd;
output wrdata;

wire sysclk,reset;
wire [31:0] IRDATA;

reg wrcmd;
reg [7:0] wrdata;

wire [7:0] InputCmd;
reg  [7:0] TempCmd;
assign InputCmd = IRDATA[23:16];


//******************** CMD parameter ***********************//
reg [35:0] CmdList;
reg  [5:0] CmdCnt;




//******************** STATE parameter *********************//
reg [2:0] state,nextstate;

parameter INIT  = 3'b000,
			 START = 3'b001,
			 PARA  = 3'b010,
			 CMD 	 = 3'b011;


//******************** Declare defined parameter *****************//
parameter UP 		= 8'h01,
			 DOWN 	= 8'h01,
			 LEFT 	= 8'h02,
			 RIGHT 	= 8'h03,
			 STOP  	= 8'h04;
			 
always@(posedge sysclk)
begin
	if(reset)
			state = INIT;
	else
			state = nextstate;
end


always@(posedge sysclk)
begin
	 case(state)
	 INIT:begin
			wrdata <= 8'h80;
			wrcmd  <= 1'b1;
			nextstate <= START;
			CmdCnt <=4'h0;
			CmdList <=36'h0;
			TempCmd <=8'h00;
			end
	START:begin
			wrdata <=8'h00;
			wrcmd  <=1'b0;
			if(!(TempCmd&InputCmd))
				begin
					nextstate <= PARA;
					TempCmd	 <= InputCmd;
				end
			else
					nextstate <=START;
			end
	endcase
end
						
always@(posedge sysclk)
begin
CmdList[35:32] <= 8'h89;
nextstate	<= CMD;

if(STATE == PARA)
	case(InputCmd)
		UP:   CmdList[31:16]    <= 16'h00c8;
		DOWN: CmdList[31:16]    <= 16'hff38;
		LEFT: CmdList[15:0] 	   <= 16'h03e8;
		RIGHT:CmdList[15:0]     <= 16'hfc18;
		STOP: CmdList[31:0] 		<= 32'h0;
		default:CmdList <= CmdList;
	endcase
end

always@(posedge sysclk)
begin
		wrdata <= CmdList[35-CmdCnt:35-CmdCnt-3];
		wrcmd  <= 1'b1;
		CmdCnt <= CmdCnt + 4;
		if(CmdCnt == 32)
				nextstate <= START;
		else
				nextstate <= CMD;
end
endmodule